import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;


/*
 * 在hdfs某目录中有一系列文件，内容为","号分
 * 隔，分隔后的元素均为数值类型、字母、中文，
 * 所有出现的数值的和。
 */
public class Exercise2 {
	
	public static class MyMapper extends Mapper<Object, Text, Text, IntWritable>{
		private static final IntWritable result = new IntWritable();
		private Text word = new Text();
		
		@Override
		public void map(Object key, Text value, Context context) throws IOException, InterruptedException{
			StringTokenizer stkr = new StringTokenizer(value.toString(), ",");
			int sum = 0;
			while(stkr.hasMoreTokens()){
				String str = stkr.nextToken();
				if(str.matches("\\d+")){
					sum += Integer.parseInt(str);
				}
			}
			word.set("数值和：");
			result.set(sum);
			context.write(word, result);
		}
	}
	
	public static class MyReducer extends Reducer<Text, IntWritable, Text, IntWritable>{
		private IntWritable result = new IntWritable();
		@Override
		public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException{
			int sum = 0;
			for(IntWritable val : values){
				sum += val.get();
			}
			result.set(sum);
			context.write(key, result);
		}
	}
	
	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException {
		Configuration hadoopConf = new Configuration();
		Job job = Job.getInstance(hadoopConf, "wy_exercise2");
		job.setJarByClass(Exercise2.class);
		job.setMapperClass(MyMapper.class);
		job.setCombinerClass(MyReducer.class);
		job.setReducerClass(MyReducer.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		System.exit(job.waitForCompletion(true)? 0 : 1);	
	}
}
